openapi: 3.0.0
info:
  title: Public Content By Concept API
  description: Provides a public API for retrieving a list of the most recently published
    content related to a given concept
  version: 2.0.0
  contact:
    name: Universal Publishing
    email: Universal.Publishing.Platform@ft.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
security:
    - ApiKeyAuth: []
paths:
  /content:
    get:
      description: Get recently published content for a concept
      tags:
        - Public API
      parameters:
        - in: query
          name: isAnnotatedBy
          required: true
          description: The given concept's UUID or URI we want to query
          schema:
            type: string
        - in: query
          name: fromDate
          description: Start date, in YYYY-MM-DD format.
          schema:
            type: string
        - in: query
          name: toDate
          description: End date, in YYYY-MM-DD format.
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum number of related content, defaults to 50 if not given
          schema:
            type: string
        - in: query
          name: page
          description: The page number, defaults to 1 if not given
          schema:
            type: string
      responses:
        "200":
          description: Success body if at least 1 piece of content is found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
        "400":
          description: Bad request if the uuid/uri path parameter is badly formed or
            missing or if fromDate/toDate's cannot be parsed
        "404":
          description: Not Found if there are no annotations for specified concept
        "500":
          description: Internal Server Error if there was an issue processing the records.
        "503":
          description: Service Unavailable if it cannot connect to Neo4j.
  /content/{conceptUUID}/implicitly:
    get:
      description: Get recently published content for a concept implicitly
      tags:
        - Public API
      parameters:
        - in: path
          name: conceptUUID
          required: true
          description: The given concept's UUID or URI we want to query
          schema:
            type: string
      responses:
        "200":
          description: Success body if at least 1 piece of content is found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Content"
        "400":
          description: Bad request if the uuid/uri path parameter is badly formed
        "404":
          description: Not Found if there are no annotations for specified concept
        "500":
          description: Internal Server Error if there was an issue processing the records.
        "503":
          description: Service Unavailable if it cannot connect to Neo4j.
  /__health:
    servers:
       - url: https://upp-prod-delivery-glb.upp.ft.com/__public-content-by-concept-api/
       - url: https://upp-staging-delivery-glb.upp.ft.com/__public-content-by-concept-api/
    get:
      summary: Healthchecks
      description: Runs application healthchecks and returns FT Healthcheck style json.
      security:
        - BasicAuth: []
      tags:
        - Health
      responses:
        "200":
          description: Should always return 200 along with the output of the healthchecks -
            regardless of whether the healthchecks failed or not. Please inspect
            the overall `ok` property to see whether or not the application is
            healthy.
  /__build-info:
    servers:
       - url: https://upp-prod-delivery-glb.upp.ft.com/__public-content-by-concept-api/
       - url: https://upp-staging-delivery-glb.upp.ft.com/__public-content-by-concept-api/
    get:
      summary: Build Information
      description: Returns application build info, such as the git repository and revision,
        the golang version it was built with, and the app release version.
      security:
        - BasicAuth: []
      tags:
        - Info
      responses:
        "200":
          description: Outputs build information as described in the summary.
  /__gtg:
    servers:
       - url: https://upp-prod-delivery-glb.upp.ft.com/__public-content-by-concept-api/
       - url: https://upp-staging-delivery-glb.upp.ft.com/__public-content-by-concept-api/
    get:
      summary: Good To Go
      description: Lightly healthchecks the application, and returns a 200 if it's
        Good-To-Go.
      security:
        - BasicAuth: []
      tags:
        - Health
      responses:
        "200":
          description: The application is healthy enough to perform all its functions
            correctly - i.e. good to go.
        "503":
          description: One or more of the applications healthchecks have failed, so please
            do not use the app. See the /__health endpoint for more detailed
            information.
  /__api:
    servers:
       - url: https://upp-prod-delivery-glb.upp.ft.com/__public-content-by-concept-api/
       - url: https://upp-staging-delivery-glb.upp.ft.com/__public-content-by-concept-api/
    get:
      summary: API Documentation
      description: Returns OpenAPI documentation for the application.
      security:
        - BasicAuth: []
      tags:
        - Info
      responses:
        "200":
          description: Returns OpenAPI information.
          content:
            text/plain;charset=utf-8:
              schema:
                type: string
servers:
  - url: https://api.ft.com/
  - url: https://api-t.ft.com/

components:
  schemas:
    Content:
      type: object
      properties:
        id:
          type: string
          description: ID of the content
        apiUrl:
          type: string
          description: URL of the content
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    BasicAuth:
      type: http
      scheme: basic
